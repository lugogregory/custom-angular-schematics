import { AfterViewInit, Component, ViewChild } from '@angular/core';
import { MatTableModule, MatTable } from '@angular/material/table';
import { MatPaginatorModule, MatPaginator } from '@angular/material/paginator';
import { MatSortModule, MatSort } from '@angular/material/sort';
import {
  <%= classify(name) %>DataSource,
  <%= classify(name) %>Item,
} from './<%= dasherize(name) %>.datasource';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { SelectionModel } from '@angular/cdk/collections';
import { MatIconModule } from '@angular/material/icon';
import { MatSelectModule } from '@angular/material/select';

@Component({
  selector: 'app-<%= dasherize(name) %>',
  templateUrl: './<%= dasherize(name) %>.component.html',
  styleUrl: './<%= dasherize(name) %>.component.scss',
  imports: [
    MatTableModule,
    MatPaginatorModule,
    MatSortModule,
    MatCheckboxModule,
    MatIconModule,
    MatSelectModule,
  ],
})
export class <%= classify(name) %>Component implements AfterViewInit {
  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;
  @ViewChild(MatTable) table!: MatTable<<%= classify(name) %>Item>;
  dataSource = new <%= classify(name) %>DataSource();
  selection = new SelectionModel<any>(true, []);

  /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */
  displayedColumns = ['select', 'id', 'name', 'weight', 'symbol', 'star'];
  expandedElement!: <%= classify(name) %>Item | null;

  actions: any[] = [
    { name: 'Edit', action: 'edit' },
    { name: 'Delete', action: 'delete' },
    { name: 'View detail', action: 'visibility' },
  ];

  stopPropagation(event: Event) {
    event.stopPropagation();
  }

  ngAfterViewInit(): void {
    this.dataSource.sort = this.sort;
    this.dataSource.paginator = this.paginator;
    this.table.dataSource = this.dataSource;
  }

  /** Whether the number of selected elements matches the total number of rows. */
  isAllSelected() {
    const numSelected = this.selection.selected.length;
    const numRows = this.dataSource.data.length;
    return numSelected === numRows;
  }

  /** Selects all rows if they are not all selected; otherwise clear selection. */
  toggleAllRows() {
    if (this.isAllSelected()) {
      this.selection.clear();
      return;
    }

    this.selection.select(...this.dataSource.data);
  }

  /** Toggles the expanded state of an element. */
  toggle(element: <%= classify(name) %>Item) {
    this.expandedElement = this.isExpanded(element) ? null : element;
  }

  /** Checks whether an element is expanded. */
  isExpanded(element: <%= classify(name) %>Item) {
    return this.expandedElement === element;
  }

  /** The label for the checkbox on the passed row */
  checkboxLabel(row?: <%= classify(name) %>Item): string {
    if (!row) {
      return `${this.isAllSelected() ? 'deselect' : 'select'} all`;
    }
    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${
      row.id + 1
    }`;
  }
}
